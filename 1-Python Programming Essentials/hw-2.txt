Question 1
Consider the following Python function definition:

def cube_root(val):
    """
    Given number, return the cube root of the number
    """
    return val ** (1 / 3)
    
Which of the expressions below is a valid call to the function cube_root?
- cube_root(8.0)

Question 2
Running the following program results in the error
SyntaxError: bad input on line 5 ('return')

Which of the following describes the problem?
def max_of_2(val1, val2):
    if val1 > val2:
        return val1
    else:
    return val2

def max_of_3(val1, val2, val3):
    return max_of_2(val1, max_of_2(val2, val3))
    
- Incorrect indentation
The else clause of the function definition for max_of_2() should be indented, but it is not.  

Question 3
The following code has a number of syntactic errors in it. The intended math calculations are correct, so the only errors are syntactic. Fix these errors.

define project_to_distance(point_x point_y distance):
    dist_to_origin = (pointx ** 2 + pointy ** 2) ** 0.5
     scale == distance / dist_to_origin
    print point_x * scale, point_y * scale

project-to-distance(2, 7, 4)

Once the code has been fully corrected, submit the second number printed in CodeSkulptor3. 
- 3.846095790563293

Question 4
A common error for beginning programmers is to confuse the behavior of print statements and return statements.

print statements can appear anywhere in your program and print a specified value(s) in the console. Note that execution of your Python program continues onward to the following statement. Remember that executing a print statement inside a function definition does not return a value from the function.

return statements appear inside functions. The value associated with the return statement is substituted for the expression that called the function. Note that executing a return statement terminates execution of the function definition immediately. 
Any statements in the function definition following the return statement are ignored. Execution of your Python code resumes with the execution of the statement after the function call.

def do_stuff():
    """
    Example of print vs. return
    """
    print("Hello world")
    return "Is it over yet?"
    print("Goodbye cruel world!")

print(do_stuff())

Note that this code calls the function do_stuff in the last print statement. The definition of do_stuff includes two print statements and one return statement.

Which of the following is the console output that results from executing this piece of code?

- Hello world
  Is it over yet?
  
Question 6
When investing money, an important concept to know is compound interest.

The equation  FV = PV(1 + rate)^(periods) relates the following four quantities.

The present value (PV) of your money is how much money you have now.
The future value (FV) of your money is how much money you will have in the future.
The nominal interest rate per period (rate) is how much interest you earn during a particular length of time, before accounting for compounding. This is typically expressed as a percentage.
The number of periods (periods) is how many periods in the future this calculation is for.

Finish the following code, run it, and submit the printed number. Provide at least four digits of precision after the decimal point.

def future_value(present_value, annual_rate, periods_per_year, years):
    """
    Input: the numbers present_value, annual_rate, periods_per_year, years
    Output: future value based on formula given in question
    """
    rate_per_period = annual_rate / periods_per_year
    periods = periods_per_year * years

    # Put your code here.
    

print("$1000 at 2% compounded daily for 4 years yields $", future_value(1000, .02, 365, 4))

- 1083.284693436586
